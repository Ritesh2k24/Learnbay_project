name: Deploy Employee Portfolio Infra

on:
  push:
    branches: [ master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Prepare Lambda packages
        run: |
          mkdir -p lambda_zips
          zip -j lambda_zips/contact_handler.zip lambda/contact_handler.py
          zip -j lambda_zips/visitor_logger.zip lambda/visitor_logger.py
          echo "Lambda packages created"

      - name: Terraform Init
        run: |
          cd terraform
          terraform init -input=false

      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -input=false -out=tfplan

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -input=false -auto-approve tfplan

      - name: Get Terraform Outputs
        id: tf-outputs
        run: |
          cd terraform
          # Get state in JSON format (more reliable than output)
          terraform show -json > tfstate.json
          
          # Extract values with full validation
          API_URL=$(jq -r '.values.outputs.analytics_api_url.value' tfstate.json)
          S3_BUCKET_NAME=$(jq -r '.values.outputs.s3_bucket_name.value' tfstate.json)
          
          # Validate outputs
          if [[ -z "$API_URL" || -z "$S3_BUCKET_NAME" ]]; then
            echo "::error::Failed to extract required outputs"
            jq . tfstate.json
            exit 1
          fi
          
          # Set outputs for GitHub environment
          echo "API_URL=$API_URL" >> $GITHUB_ENV
          echo "S3_BUCKET_NAME=$S3_BUCKET_NAME" >> $GITHUB_ENV
          
          # Debug output
          echo "::group::Terraform Outputs"
          echo "API URL: $API_URL"
          echo "S3 Bucket: $S3_BUCKET_NAME"
          echo "::endgroup::"

      - name: Verify Deployment Assets
        run: |
          echo "::group::File Verification"
          ls -la frontend/
          [ -f frontend/contacts.js ] || { echo "::error::contacts.js missing"; exit 1; }
          [ -f frontend/analytics.js ] || { echo "::error::analytics.js missing"; exit 1; }
          echo "::endgroup::"

      - name: Inject API Endpoints
        run: |
          cd frontend
          CONTACTS_API_URL=$(terraform output -raw contact_api_url | sed 's/[\/&]/\\&/g')
          ANALYTICS_API_URL=$(terraform output -raw analytics_api_url | sed 's/[\/&]/\\&/g')

          sed -i "s/CONTACTS_API_PLACEHOLDER/$CONTACTS_API_URL/g" contacts.js
          sed -i "s/ANALYTICS_API_PLACEHOLDER/$ANALYTICS_API_URL/g" analytics.js
          echo "Injected contact and analytics API endpoints"


      - name: Deploy to S3
        run: |
          # Validate bucket name format
          if [[ ! "$S3_BUCKET_NAME" =~ ^[a-z0-9.-]{3,63}$ ]]; then
            echo "::error::Invalid S3 bucket name: $S3_BUCKET_NAME"
            exit 1
          fi

          echo "::group::S3 Sync Process"
          # Sync static assets with caching
          aws s3 sync frontend/ s3://$S3_BUCKET_NAME/ \
            --delete \
            --cache-control "max-age=31536000" \
            --exclude "*.html" \
            --exclude "*.css" \
            --exclude "*.js"

          # Sync CSS/JS with shorter cache
          aws s3 sync frontend/ s3://$S3_BUCKET_NAME/ \
            --delete \
            --cache-control "max-age=86400" \
            --include "*.css" \
            --include "*.js"

          # Sync HTML with no cache
          aws s3 sync frontend/ s3://$S3_BUCKET_NAME/ \
            --delete \
            --cache-control "no-cache" \
            --include "*.html"
          echo "::endgroup::"

          echo "::notice::Deployment complete!"
          echo "Website URL: http://$S3_BUCKET_NAME.s3-website-us-east-1.amazonaws.com"

      - name: Post-deployment verification
        run: |
          echo "::group::Final Verification"
          aws s3 ls s3://$S3_BUCKET_NAME/ --recursive --human-readable
          curl -I http://$S3_BUCKET_NAME.s3-website-us-east-1.amazonaws.com
          echo "::endgroup::"