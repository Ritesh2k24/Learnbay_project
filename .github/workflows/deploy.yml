name: Deploy Employee Portfolio Infra

on:
  push:
    branches: [ master ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Zip contact form Lambda function
        run: |
          mkdir -p lambda_zips
          zip -j lambda_zips/contact_handler.zip lambda/contact_handler.py

      - name: Zip visitor logger Lambda function
        run: |
          zip -j lambda_zips/visitor_logger.zip lambda/visitor_logger.py

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve

      - name: Set clean Terraform outputs
        id: set-outputs
        run: |
          cd terraform
          # Get clean outputs using JSON
          echo "API_URL=$(terraform output -json | jq -r '.analytics_api_url.value')" >> $GITHUB_ENV
          echo "S3_BUCKET_NAME=$(terraform output -json | jq -r '.s3_bucket_name.value')" >> $GITHUB_ENV
          echo "Extracted S3 Bucket: $S3_BUCKET_NAME"

      - name: Inject API URL into frontend JS
        run: |
          cd frontend
          # Verify files exist
          if [ ! -f contacts.js ] || [ ! -f analytics.js ]; then
            echo "Error: Frontend files not found"
            exit 1
          fi
          
          # Perform substitution
          for file in contacts.js analytics.js; do
            sed -i "s#API_PLACEHOLDER#${{ env.API_URL }}#g" "$file"
            echo "Updated $file with API URL: ${{ env.API_URL }}"
          done

      - name: Upload static website to S3
        run: |
          # Verify bucket name is set
          if [ -z "$S3_BUCKET_NAME" ]; then
            echo "Error: S3_BUCKET_NAME not set"
            exit 1
          fi

          # Sync with proper caching headers
          echo "Uploading files to s3://$S3_BUCKET_NAME"
          aws s3 sync frontend/ s3://$S3_BUCKET_NAME/ \
            --delete \
            --cache-control "max-age=86400" \
            --exclude "*.html" && \
          aws s3 sync frontend/ s3://$S3_BUCKET_NAME/ \
            --delete \
            --cache-control "no-cache" \
            --include "*.html"


          echo "Website deployed successfully to:"
          echo "http://$S3_BUCKET_NAME.s3-website-us-east-1.amazonaws.com"

      - name: Print API URL (for debugging)
        run: echo "API Gateway URL is $API_URL"